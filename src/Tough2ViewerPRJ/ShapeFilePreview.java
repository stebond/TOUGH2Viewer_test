/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Tough2ViewerPRJ;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.shapefile.ShpFiles;
import org.geotools.data.shapefile.dbf.DbaseFileHeader;
import org.geotools.data.shapefile.dbf.DbaseFileReader;
import org.geotools.data.shapefile.shp.ShapefileReader;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleInsets;

/**
 *
 * @author stebond
 */
public class ShapeFilePreview extends javax.swing.JFrame {

    boolean initcomplete = false;
    String[] TitlePoly;
    File myLocalFile;
    private int totalshape = 0;
    Geometry[] shape;
    ArrayList newshape;

    /**
     * Creates new form ShapeFilePreview
     */
    public ShapeFilePreview(File file) {
        initComponents();
        myLocalFile = file;
        initcomplete = true;
        jPanel1.setLayout(new java.awt.BorderLayout());
        try {
            LoadFileSHP();
        } catch (Exception e) {

        }
        plotGraphXY();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelCommand = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 218, Short.MAX_VALUE)
        );

        jPanelCommand.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCommandLayout = new javax.swing.GroupLayout(jPanelCommand);
        jPanelCommand.setLayout(jPanelCommandLayout);
        jPanelCommandLayout.setHorizontalGroup(
            jPanelCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCommandLayout.createSequentialGroup()
                .addContainerGap(307, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanelCommandLayout.setVerticalGroup(
            jPanelCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    public String LoadFileSHP() throws IOException {
        newshape = new ArrayList();
        String shapename = myLocalFile.getName();
        if (myLocalFile != null) {
            int num_shapes = 0;
            ShpFiles in2 = new ShpFiles(myLocalFile);

            DbaseFileReader rDbf = new DbaseFileReader(in2, false, ShapefileDataStore.DEFAULT_STRING_CHARSET);
            Object[] fields = new Object[rDbf.getHeader().getNumFields()];
            DbaseFileHeader myHeader = rDbf.getHeader();

            //int numfields=myHeader.getNumFields();
            num_shapes = myHeader.getNumRecords();

            double table[] = new double[num_shapes];
            int row = 0;
            while (rDbf.hasNext()) {
                rDbf.readEntry(fields);
                //table[row]=Double.parseDouble(fields[zRow].toString());
                row++;
                // do stuff
            }
            rDbf.close();

            GeometryFactory gf = new GeometryFactory();

            ShapefileReader r = new ShapefileReader(in2, true, true, gf);
            int shapes = 0;
            shape = new Geometry[num_shapes];
            while (r.hasNext()) {
                //String myString=r.toString();
                shape[shapes] = (Geometry) r.nextRecord().shape();
                //innt numgeom=shape[shapes].getNumGeometries();
                //int npoint=shape[shapes].getNumPoints();
                Coordinate[] myCord = shape[shapes].getCoordinates();
                int records = myCord.length;
                Point3d[] myPoint = new Point3d[records];
                for (int i = 0; i < records; i++) {
                    myPoint[i] = new Point3d();
                    myPoint[i].x = (double) myCord[i].x;
                    myPoint[i].y = (double) myCord[i].y;
                    myPoint[i].z = 0;
                }
                newshape.add(myPoint);
                shapes++;
            }
            r.close();

        }

        return shapename;
    }

    private void plotGraphXY() {
        if (initcomplete) {
            int numeropolilinee = newshape.size();
            numeropolilinee = 1;
            TitlePoly = new String[numeropolilinee];
            for (int i = 0; i < numeropolilinee; i++) {
                TitlePoly[i] = Integer.toString(i);
            }
            XYSeries[] seriesPolyLines = new XYSeries[numeropolilinee];
            XYSeriesCollection dataset = new XYSeriesCollection();

            for (int k = 0; k < numeropolilinee; k++) {
                Point3d[] myPoint3d = (Point3d[]) newshape.get(k);
                seriesPolyLines[k] = new XYSeries(TitlePoly[k]);
//                for(int i1=0;i1<myPoint3d.length;i1++)
//                {
//                    seriesPolyLines[k].add(myPoint3d[i1].x,myPoint3d[i1].y);
//                }
                seriesPolyLines[k].add(0.0f, 0.0f);
                seriesPolyLines[k].add(1.0f, 0.0f);
                seriesPolyLines[k].add(1.0f, 1.0f);
                seriesPolyLines[k].add(0.0f, 1.0f);
                seriesPolyLines[k].add(0.0f, 0.0f);
                dataset.addSeries(seriesPolyLines[k]);

            }
            String TitleModule = "test";

            JFreeChart chart;
            chart = ChartFactory.createXYLineChart(
                    TitleModule,
                    "x",
                    "y",
                    dataset,
                    org.jfree.chart.plot.PlotOrientation.VERTICAL,
                    false,
                    false,
                    false);

            XYPlot plot = chart.getXYPlot();
            int n_series = dataset.getSeriesCount();
            XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
            double Width = Tough2Viewer.dataobj.ShapeDimension;
            double Height = Tough2Viewer.dataobj.ShapeDimension;
            Shape myNewShape = new Rectangle2D.Double(-Width, -Height, 2 * Width, 2 * Height);
            for (int i = 0; i < n_series; i++) {
                renderer.setSeriesStroke(i, new BasicStroke(Tough2Viewer.dataobj.LineThicness, BasicStroke.JOIN_ROUND, BasicStroke.JOIN_BEVEL));
                renderer.setSeriesShape(i, myNewShape);
            }

            plot.setDomainGridlinePaint(Tough2Viewer.dataobj.GridAxisColor);
            plot.setRangeGridlinePaint(Tough2Viewer.dataobj.GridAxisColor);
            BasicStroke theGridLineStroke = (BasicStroke) plot.getDomainGridlineStroke();
            float linewidth = theGridLineStroke.getLineWidth();
            linewidth = linewidth * Tough2Viewer.dataobj.GridAxisThickness;
            float[] theDashArray = theGridLineStroke.getDashArray();

            for (int i = 0; i < theDashArray.length; i++) {
                theDashArray[i] = theDashArray[i] * Tough2Viewer.dataobj.StretchDashlines;
            }

            int cap = theGridLineStroke.getEndCap();
            int join = theGridLineStroke.getLineJoin();
            float miterlimit = theGridLineStroke.getMiterLimit();
            float dashphase = theGridLineStroke.getDashPhase();
            BasicStroke myGridLineStroke = new BasicStroke(linewidth, cap, join, miterlimit, theDashArray, dashphase);
            float offset = Tough2Viewer.dataobj.GridOffSet;
            plot.setAxisOffset(new RectangleInsets(offset, offset, offset, offset));
            plot.setDomainGridlineStroke(myGridLineStroke);
            plot.setRangeGridlineStroke(myGridLineStroke);
            plot.setBackgroundPaint(Tough2Viewer.dataobj.PlotAreaColor);
            //
            //

            plot.setRenderer(renderer);
            Tough2Viewer.dataobj.ScientificNotationAxis(plot);
            ChartPanel panelchart1 = new ChartPanel(chart);

            panelchart1.setSize(jPanel1.getSize());
            panelchart1.setVisible(true);
            jPanel1.removeAll();
            jPanel1.repaint();
            jPanel1.add(panelchart1, BorderLayout.CENTER);
            jPanel1.setVisible(true);
            jPanel1.repaint();
        }

    }

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCommand;
    // End of variables declaration//GEN-END:variables
}
