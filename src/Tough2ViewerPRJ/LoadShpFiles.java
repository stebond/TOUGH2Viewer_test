/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * LoadShpFiles.java
 *
 * Created on 17-dic-2010, 16.32.30
 */
package Tough2ViewerPRJ;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Point;
import java.awt.Color;
import java.io.*;
import java.util.ArrayList;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.vecmath.Point3f;
import org.geotools.data.FileDataStore;
import org.geotools.data.FileDataStoreFinder;
import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.shapefile.ShpFiles;
import org.geotools.data.shapefile.dbf.DbaseFileHeader;
import org.geotools.data.shapefile.dbf.DbaseFileReader;
import org.geotools.data.shapefile.shp.ShapefileReader;
import javax.vecmath.Color3f;
import org.geotools.swing.data.JFileDataStoreChooser;

/**
 *
 * @author stebond
 */
public class LoadShpFiles extends javax.swing.JFrame {

    private int zRow;
    //private DefaultRepository repository = new DefaultRepository();
    //private MapContext context;
    private String title;
    private File cwd;
    private File file;
    private int totalshape = 0;
    double[] table;
    Geometry[] shape;

    /**
     * Creates new form LoadShpFiles
     */
    public LoadShpFiles() {
        initComponents();
        jComboBox1.setEnabled(false);
        jButtonImportShape.setEnabled(false);
        jCheckBox1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonClose = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonShapeFile = new javax.swing.JButton();
        jButtonShowPreviewShape = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButtonImportShape = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonRasterFile = new javax.swing.JButton();
        jButtonShowPreviewRaster = new javax.swing.JButton();
        jButtonImportRaster = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonSelectPLY = new javax.swing.JButton();
        jCheckBoxClosedSurface = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LoadShapeFile");
        setResizable(false);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Shape"));

        jButtonShapeFile.setText("Shape File...");
        jButtonShapeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShapeFileActionPerformed(evt);
            }
        });

        jButtonShowPreviewShape.setText("Show Preview");
        jButtonShowPreviewShape.setEnabled(false);
        jButtonShowPreviewShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowPreviewShapeActionPerformed(evt);
            }
        });

        jCheckBox1.setText("use Z shapes");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("dbf field");

        jButtonImportShape.setText("Import");
        jButtonImportShape.setEnabled(false);
        jButtonImportShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportShapeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonShapeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonShowPreviewShape, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonImportShape, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonImportShape, jButtonShapeFile, jButtonShowPreviewShape});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButtonShapeFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonShowPreviewShape)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jButtonImportShape)
                .addGap(51, 51, 51))
        );

        jTabbedPane1.addTab("Shape", jPanel1);

        jButtonRasterFile.setText("Raster File ...");
        jButtonRasterFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRasterFileActionPerformed(evt);
            }
        });

        jButtonShowPreviewRaster.setText("Show Preview");
        jButtonShowPreviewRaster.setEnabled(false);

        jButtonImportRaster.setText("Import");
        jButtonImportRaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportRasterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRasterFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonShowPreviewRaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImportRaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonRasterFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonShowPreviewRaster)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportRaster)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Raster", jPanel2);

        jButtonSelectPLY.setText("Select PLY file...");
        jButtonSelectPLY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectPLYActionPerformed(evt);
            }
        });

        jCheckBoxClosedSurface.setText("Closed Surface");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxClosedSurface)
                    .addComponent(jButtonSelectPLY))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButtonSelectPLY)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxClosedSurface)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PLY", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonShapeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShapeFileActionPerformed
        try {
            if (loadShapeFileSHP()) {
                jComboBox1.setEnabled(true);
                jButtonImportShape.setEnabled(true);
                jButtonShowPreviewShape.setEnabled(true);
                jCheckBox1.setEnabled(true);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButtonShapeFileActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        zRow = jComboBox1.getSelectedIndex();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButtonImportShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportShapeActionPerformed
        try {
            String shapename = loadAndSaveShapeFileSHP();
            Color c = JColorChooser.showDialog(LoadShpFiles.this, "Choose a color...", getBackground());
            Color3f shape_color = new Color3f(0.0f, 0.0f, 0.0f);
            if (c != null) {
                float r = (float) c.getRed();
                float g = (float) c.getGreen();
                float b = (float) c.getBlue();
                r = r / 255.0f;
                g = g / 255.0f;
                b = b / 255.0f;
                shape_color = new Color3f(r, g, b);
                Tough2Viewer.dataobj.addShapeColor(r, g, b);
                int i = 1;
            } else {
                Tough2Viewer.dataobj.addShapeColor(0.0f, 0.0f, 0.0f);
            }
            /////////////////////////////////////////////////////////////
            SurfaceData tmp_surface_Data = new SurfaceData();
            tmp_surface_Data.set_file_name(shapename);
            tmp_surface_Data.set_shape_color3f(shape_color);
            tmp_surface_Data.set_isSurfaceVisible(true);
            tmp_surface_Data.set_is_a_closed_surface(false);
            GraphData a = generate_shape_surface2();
            tmp_surface_Data.set_GraphData(a);
            tmp_surface_Data.set_type(0);
            tmp_surface_Data.set_PolyShape(loadAndSaveShapeFileSHP2());
            tmp_surface_Data.set_isPolyVisible(true);
            Tough2Viewer.dataobj.Surfaces_Data.add(tmp_surface_Data);
            /////////////////////////////////////////////////////////////
            Tough2Viewer.dataobj.addShapesFileName(shapename);
            Tough2Viewer.dataobj.addPolyShapeVisible(true);
            jComboBox1.setEnabled(false);
            jButtonImportShape.setEnabled(false);
            jButtonShapeFile.setEnabled(false);
            generate_shape_surface();
            Tough2Viewer.dataobj.addSurfaceShapeVisible(true);
            if (Tough2Viewer.tough2viewerGUI.OptionBoxWindow != null) {
                Tough2Viewer.tough2viewerGUI.OptionBoxWindow.AggiornaTabella2();
            }
            if (Tough2Viewer.tough2viewerGUI.importShape != null) {
                Tough2Viewer.tough2viewerGUI.importShape.AggiornaTabella2();
            }
            toINIfile(shapename);
            if (Tough2Viewer.tough2viewerGUI.VoronoiModel3D != null) {
                Tough2Viewer.tough2viewerGUI.VoronoiModel3D.update_model_scene();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonImportShapeActionPerformed
    private void toINIfile(String filename) {
        String strFilePath = "shape.ini";
        try {
            // Open an output stream
            FileOutputStream fos = new FileOutputStream(strFilePath, true);
            //DataOutputStream dos = new DataOutputStream(fos);
            PrintStream ps;
            // Print a line of text
            String stringOut = filename + ",";
            ps = new PrintStream(fos);
            ps.println(stringOut);
            ps.println();

            fos.close();
        } // Catches any error conditions
        catch (IOException e) {
            String output = "Unable to write file";
            Tough2Viewer.toLogFile(output);
            System.exit(-1);
        }
    }

    private void jButtonShowPreviewShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowPreviewShapeActionPerformed
        // TODO add your handling code here:
        try {
            showpreview();

        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButtonShowPreviewShapeActionPerformed

    private void generate_shape_surface() {
        double xmin = Tough2Viewer.dataobj.get_xmin();
        double xmax = Tough2Viewer.dataobj.get_xmax();
        double ymin = Tough2Viewer.dataobj.get_ymin();
        double ymax = Tough2Viewer.dataobj.get_ymax();
        double zmin = Tough2Viewer.dataobj.get_zmin();
        double zmax = Tough2Viewer.dataobj.get_zmax();
        int nx = 20;
        int ny = 20;
        double dx = (xmax - xmin) / ((double) (nx - 1));
        double dy = (ymax - ymin) / ((double) (ny - 1));
        double[][] zStimati = new double[ny][nx];
        for (int j = 0; j < ny; j++) {
            for (int i = 0; i < nx; i++) {
                double id = (double) i;
                double jd = (double) j;
                double xp = xmin + id * dx;
                double yp = ymin + jd * dy;
                Coordinate ptc = new Coordinate(xp, yp);
                GeometryFactory geomFac = new GeometryFactory();
                Point ptG = geomFac.createPoint(ptc);
                double[][] distance = new double[totalshape][2];
                for (int k = 0; k < totalshape; k++) {
                    distance[k][1] = (double) k;
                    distance[k][0] = ptG.distance(shape[k]);
                }
                sort(distance, totalshape);
                //numero vicini=4
                int vicini = Math.min(4, totalshape);
                double z_temp = 0;
                double z_weight = 0;
                if (distance[0][0] > 0) {
                    for (int w = 0; w < vicini; w++) {
                        int index = (int) distance[w][1];
                        z_temp = z_temp + table[index] / distance[w][0];
                        z_weight = z_weight + 1.0d / distance[w][0];
                    }
                    z_temp = z_temp / z_weight;
                } else {
                    z_temp = table[0];
                }
                zStimati[j][i] = z_temp;
            }

        }
        GraphData a = new GraphData(nx, ny);
        a.setData(zStimati);
        a.set_min(xmin, ymin, zmin);
        a.set_max(xmax, ymax, zmax);
        Tough2Viewer.dataobj.addShapesSurface(a);

    }

    private GraphData generate_shape_surface2() {
        double xmin = Tough2Viewer.dataobj.get_xmin();
        double xmax = Tough2Viewer.dataobj.get_xmax();
        double ymin = Tough2Viewer.dataobj.get_ymin();
        double ymax = Tough2Viewer.dataobj.get_ymax();
        double zmin = Tough2Viewer.dataobj.get_zmin();
        double zmax = Tough2Viewer.dataobj.get_zmax();
        int nx = 20;
        int ny = 20;
        double dx = (xmax - xmin) / ((double) (nx - 1));
        double dy = (ymax - ymin) / ((double) (ny - 1));
        double[][] zStimati = new double[ny][nx];
        for (int j = 0; j < ny; j++) {
            for (int i = 0; i < nx; i++) {
                double id = (double) i;
                double jd = (double) j;
                double xp = xmin + id * dx;
                double yp = ymin + jd * dy;
                Coordinate ptc = new Coordinate(xp, yp);
                GeometryFactory geomFac = new GeometryFactory();
                Point ptG = geomFac.createPoint(ptc);
                double[][] distance = new double[totalshape][2];
                for (int k = 0; k < totalshape; k++) {
                    distance[k][1] = (double) k;
                    distance[k][0] = ptG.distance(shape[k]);
                }
                sort(distance, totalshape);
                //numero vicini=4
                int vicini = Math.min(4, totalshape);
                double z_temp = 0;
                double z_weight = 0;
                if (distance[0][0] > 0) {
                    for (int w = 0; w < vicini; w++) {
                        int index = (int) distance[w][1];
                        z_temp = z_temp + table[index] / distance[w][0];
                        z_weight = z_weight + 1.0d / distance[w][0];
                    }
                    z_temp = z_temp / z_weight;
                } else {
                    z_temp = table[0];
                }
                zStimati[j][i] = z_temp;
            }

        }
        GraphData a = new GraphData(nx, ny);
        a.setData(zStimati);
        a.set_min(xmin, ymin, zmin);
        a.set_max(xmax, ymax, zmax);
        return a;
    }

    GraphData generate_GraphData_surface2() {
        double xmin = Tough2Viewer.dataobj.get_xmin();
        double xmax = Tough2Viewer.dataobj.get_xmax();
        double ymin = Tough2Viewer.dataobj.get_ymin();
        double ymax = Tough2Viewer.dataobj.get_ymax();
        double zmin = Tough2Viewer.dataobj.get_zmin();
        double zmax = Tough2Viewer.dataobj.get_zmax();
        int nx = 20;
        int ny = 20;
        double dx = (xmax - xmin) / ((double) (nx - 1));
        double dy = (ymax - ymin) / ((double) (ny - 1));
        double[][] zStimati = new double[ny][nx];
        for (int j = 0; j < ny; j++) {
            for (int i = 0; i < nx; i++) {
                double id = (double) i;
                double jd = (double) j;
                double xp = xmin + id * dx;
                double yp = ymin + jd * dy;
                Coordinate ptc = new Coordinate(xp, yp);
                GeometryFactory geomFac = new GeometryFactory();
                Point ptG = geomFac.createPoint(ptc);
                double[][] distance = new double[totalshape][2];
                for (int k = 0; k < totalshape; k++) {
                    distance[k][1] = (double) k;
                    distance[k][0] = ptG.distance(shape[k]);
                }
                sort(distance, totalshape);
                //numero vicini=4
                int vicini = Math.min(4, totalshape);
                double z_temp = 0;
                double z_weight = 0;
                if (distance[0][0] > 0) {
                    for (int w = 0; w < vicini; w++) {
                        int index = (int) distance[w][1];
                        z_temp = z_temp + table[index] / distance[w][0];
                        z_weight = z_weight + 1.0d / distance[w][0];
                    }
                    z_temp = z_temp / z_weight;
                } else {
                    z_temp = table[0];
                }
                zStimati[j][i] = z_temp;
            }

        }
        GraphData a = new GraphData(nx, ny);
        a.setData(zStimati);
        a.set_min(xmin, ymin, zmin);
        a.set_max(xmax, ymax, zmax);
        return a;
        //iTough2Viewer.dataobj.addShapesSurface(a);

    }

    boolean generate_raster_surface(File inputFile, boolean add)//if add=true only read and do nothing
    {
        boolean readOk = true;
        int rows = -1;
        int cols = -1;
        double[][] Zvalue = new double[1][1];
        float xmin = 0;
        float ymin = 0;
        float xmax = 0;
        float ymax = 0;
        float zmin = 0;
        float zmax = 0;
        FileInputStream fisRast;
        BufferedInputStream bisRast;
        DataInputStream disRast;
        try {
            fisRast = new FileInputStream(inputFile);
            bisRast = new BufferedInputStream(fisRast);
            disRast = new DataInputStream(bisRast);
            String linea;
            linea = disRast.readLine();
            if (linea.contains("north")) {
                //ASCII FORMAT
                ymax = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                ymin = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                xmax = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                xmin = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                rows = Integer.parseInt(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                cols = Integer.parseInt(linea.substring(6, linea.length()));
                zmin = Tough2Viewer.dataobj.get_zmin();
                Zvalue = new double[rows][cols];
                for (int i = 0; i < rows; i++) {
                    linea = disRast.readLine();
                    String[] ValueArray = JoeStringUtils1.parseSpace(linea);
                    if (ValueArray.length == cols) {
                        for (int j = 0; j < cols; j++) {
                            if (ValueArray[j].contains("*")) {
                                Zvalue[rows - 1 - i][j] = (double) zmin;
                                Zvalue[rows - 1 - i][j] = -1.0E20;
                            } else {
                                try {
                                    Zvalue[rows - 1 - i][j] = Double.parseDouble(ValueArray[j]);
                                } catch (Exception e) {
                                    String error = "Error executing:Zvalue[i][j]=Double.parseDouble(ValueArray[j]);";
                                    JOptionPane.showMessageDialog(null, error);
                                    readOk = false;
                                }
                            }
                        }
                    } else {
                        //Errore: il numero di colonne non coincide!!!
                        String error = "Number of column in header don't match column in the file";
                        JOptionPane.showMessageDialog(null, error);
                        readOk = false;
                    }
                }
            } else if (linea.contains("ncol")) {
                //ESRI FORMAT
                //ncols 240
                //nrows 239
                //xllcorner 1702000
                //yllcorner 4735000
                //cellsize 100.000000
                //NODATA_value -9999
                String test = linea.substring(5, linea.length()).replace(" ", "");
                cols = Integer.parseInt(test);
                linea = disRast.readLine();
                rows = Integer.parseInt(linea.substring(5, linea.length()).replace(" ", ""));
                linea = disRast.readLine();
                xmin = Float.parseFloat(linea.substring(9, linea.length()).replace(" ", ""));
                linea = disRast.readLine();
                ymin = Float.parseFloat(linea.substring(9, linea.length()));
                linea = disRast.readLine();
                double cellsize = Double.parseDouble(linea.substring(8, linea.length()).replace(" ", ""));//WARNING:un solo valore????
                linea = disRast.readLine();
                double NODATA_value = Double.parseDouble(linea.substring(12, linea.length()).replace(" ", ""));
                xmax = xmin + (float) cellsize * (float) cols;
                ymax = ymin + (float) cellsize * (float) rows;
                zmin = Tough2Viewer.dataobj.get_zmin();
                Zvalue = new double[rows][cols];
                for (int i = 0; i < rows; i++) {
                    linea = disRast.readLine();
                    String[] ValueArray = JoeStringUtils1.parseSpace(linea);
                    if (ValueArray.length == cols) {
                        for (int j = 0; j < cols; j++) {
                            try {
                                Zvalue[rows - 1 - i][j] = Double.parseDouble(ValueArray[j]);
                                if (Zvalue[rows - 1 - i][j] == NODATA_value) {
                                    Zvalue[rows - 1 - i][j] = zmin;
                                }
                            } catch (Exception e) {
                                String error = "Error executing:Zvalue[i][j]=Double.parseDouble(ValueArray[j]);";
                                JOptionPane.showMessageDialog(null, error);
                                readOk = false;
                            }
                        }
                    } else {
                        //Errore: il numero di colonne non coincide!!!
                        String error = "Number of column in header don't match column in the file";
                        JOptionPane.showMessageDialog(null, error);
                        readOk = false;
                    }
                }
            } else {
                //UNKNOWN FORMAT. EXIT WITH ERROR
                readOk = false;
            }
            if (readOk) {
                if (add) {
                    GraphData a = new GraphData(cols, rows);
                    a.setData(Zvalue);
                    a.set_min(xmin, ymin, zmin);
                    a.set_max(xmax, ymax, zmax);
                    Tough2Viewer.dataobj.addShapesSurface(a);
                }
            }
        } catch (Exception e) {

        }
        return readOk;
    }

    GraphData generate_raster_surface2(File inputFile, boolean add)//if add=true only read and do nothing
    {
        GraphData a;
        boolean readOk = true;
        int rows = -1;
        int cols = -1;
        double[][] Zvalue = new double[1][1];
        float xmin = 0;
        float ymin = 0;
        float xmax = 0;
        float ymax = 0;
        float zmin = 0;
        float zmax = 0;
        FileInputStream fisRast;
        BufferedInputStream bisRast;
        DataInputStream disRast;
        try {
            fisRast = new FileInputStream(inputFile);
            bisRast = new BufferedInputStream(fisRast);
            disRast = new DataInputStream(bisRast);
            String linea;
            linea = disRast.readLine();
            if (linea.contains("north")) {
                //ASCII FORMAT
                ymax = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                ymin = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                xmax = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                xmin = Float.parseFloat(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                rows = Integer.parseInt(linea.substring(6, linea.length()));
                linea = disRast.readLine();
                cols = Integer.parseInt(linea.substring(6, linea.length()));
                zmin = Tough2Viewer.dataobj.get_zmin();
                Zvalue = new double[rows][cols];
                for (int i = 0; i < rows; i++) {
                    linea = disRast.readLine();
                    String[] ValueArray = JoeStringUtils1.parseSpace(linea);
                    if (ValueArray.length == cols) {
                        for (int j = 0; j < cols; j++) {
                            if (ValueArray[j].contains("*")) {
                                Zvalue[rows - 1 - i][j] = (double) zmin;
                                Zvalue[rows - 1 - i][j] = -1.0e20;
                            } else {
                                try {
                                    Zvalue[rows - 1 - i][j] = Double.parseDouble(ValueArray[j]);
                                } catch (Exception e) {
                                    String error = "Error executing:Zvalue[i][j]=Double.parseDouble(ValueArray[j]);";
                                    JOptionPane.showMessageDialog(null, error);
                                    readOk = false;
                                }
                            }
                        }
                    } else {
                        //Errore: il numero di colonne non coincide!!!
                        String error = "Number of column in header don't match column in the file";
                        JOptionPane.showMessageDialog(null, error);
                        readOk = false;
                    }
                }
            } else if (linea.contains("ncol")) {
                //ESRI FORMAT
                //ncols 240
                //nrows 239
                //xllcorner 1702000
                //yllcorner 4735000
                //cellsize 100.000000
                //NODATA_value -9999
                String test = linea.substring(5, linea.length()).replace(" ", "");
                cols = Integer.parseInt(test);
                linea = disRast.readLine();
                rows = Integer.parseInt(linea.substring(5, linea.length()).replace(" ", ""));
                linea = disRast.readLine();
                xmin = Float.parseFloat(linea.substring(9, linea.length()).replace(" ", ""));
                linea = disRast.readLine();
                ymin = Float.parseFloat(linea.substring(9, linea.length()));
                linea = disRast.readLine();
                double cellsize = Double.parseDouble(linea.substring(8, linea.length()).replace(" ", ""));//WARNING:un solo valore????
                linea = disRast.readLine();
                double NODATA_value = Double.parseDouble(linea.substring(12, linea.length()).replace(" ", ""));
                xmax = xmin + (float) cellsize * (float) cols;
                ymax = ymin + (float) cellsize * (float) rows;
                zmin = Tough2Viewer.dataobj.get_zmin();
                Zvalue = new double[rows][cols];
                for (int i = 0; i < rows; i++) {
                    linea = disRast.readLine();
                    String[] ValueArray = JoeStringUtils1.parseSpace(linea);
                    if (ValueArray.length == cols) {
                        for (int j = 0; j < cols; j++) {
                            try {
                                Zvalue[rows - 1 - i][j] = Double.parseDouble(ValueArray[j]);
                                if (Zvalue[rows - 1 - i][j] == NODATA_value) {
                                    Zvalue[rows - 1 - i][j] = zmin;
                                }
                            } catch (Exception e) {
                                String error = "Error executing:Zvalue[i][j]=Double.parseDouble(ValueArray[j]);";
                                JOptionPane.showMessageDialog(null, error);
                                readOk = false;
                            }
                        }
                    } else {
                        //Errore: il numero di colonne non coincide!!!
                        String error = "Number of column in header don't match column in the file";
                        JOptionPane.showMessageDialog(null, error);
                        readOk = false;
                    }
                }
            } else {
                //UNKNOWN FORMAT. EXIT WITH ERROR
                readOk = false;
            }
            if (readOk) {
                if (add) {
                    a = new GraphData(cols, rows);
                    a.setData(Zvalue);
                    a.set_min(xmin, ymin, zmin);
                    a.set_max(xmax, ymax, zmax);

                    Tough2Viewer.dataobj.addShapesSurface(a);
                    return a;
                }
            }
        } catch (Exception e) {

        }
        return null;
    }
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonRasterFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRasterFileActionPerformed

        String pippi = Tough2Viewer.dataobj.get_WorkingPath();
        cwd = null;
        try {
            cwd = new File(pippi);
        } catch (Exception e) {

        }
        final JFileChooser fc = new JFileChooser(cwd);
        fc.setDialogTitle("Open Raster");
        int returnVal = fc.showOpenDialog(LoadShpFiles.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            if (generate_raster_surface(file, false) == false) {
                String error = "Error when reading raster file";
                JOptionPane.showMessageDialog(null, error);
            }
        }
    }//GEN-LAST:event_jButtonRasterFileActionPerformed
    void CreateDummyPolyShape() throws IOException {
        //this is for preserve structure of tables....
        //will create a dummy shape, rectangle, to fill the table and arraylists...
        double xmin = Tough2Viewer.dataobj.get_xmin();
        double xmax = Tough2Viewer.dataobj.get_xmax();
        double ymin = Tough2Viewer.dataobj.get_ymin();
        double ymax = Tough2Viewer.dataobj.get_ymax();
        double zmin = Tough2Viewer.dataobj.get_zmin();
        double zmax = Tough2Viewer.dataobj.get_zmax();
        ArrayList newshape = new ArrayList();
        Point3f[] myPoint = new Point3f[5];
        myPoint[0] = new Point3f();
        myPoint[0].x = (float) xmin;
        myPoint[0].y = (float) ymin;
        myPoint[0].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[1] = new Point3f();
        myPoint[1].x = (float) xmax;
        myPoint[1].y = (float) ymin;
        myPoint[1].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[2] = new Point3f();
        myPoint[2].x = (float) xmax;
        myPoint[2].y = (float) ymax;
        myPoint[2].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[3] = new Point3f();
        myPoint[3].x = (float) xmin;
        myPoint[3].y = (float) ymax;
        myPoint[3].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[4] = new Point3f();
        myPoint[4].x = (float) xmin;
        myPoint[4].y = (float) ymin;
        myPoint[4].z = (float) zmin;
        newshape.add(myPoint);
        Tough2Viewer.dataobj.addShape(newshape);

    }

    ArrayList CreateDummyPolyShape2() throws IOException {
        //this is for preserve structure of tables....
        //will create a dummy shape, rectangle, to fill the table and arraylists...
        double xmin = Tough2Viewer.dataobj.get_xmin();
        double xmax = Tough2Viewer.dataobj.get_xmax();
        double ymin = Tough2Viewer.dataobj.get_ymin();
        double ymax = Tough2Viewer.dataobj.get_ymax();
        double zmin = Tough2Viewer.dataobj.get_zmin();
        double zmax = Tough2Viewer.dataobj.get_zmax();
        ArrayList newshape = new ArrayList();
        Point3f[] myPoint = new Point3f[5];
        myPoint[0] = new Point3f();
        myPoint[0].x = (float) xmin;
        myPoint[0].y = (float) ymin;
        myPoint[0].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[1] = new Point3f();
        myPoint[1].x = (float) xmax;
        myPoint[1].y = (float) ymin;
        myPoint[1].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[2] = new Point3f();
        myPoint[2].x = (float) xmax;
        myPoint[2].y = (float) ymax;
        myPoint[2].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[3] = new Point3f();
        myPoint[3].x = (float) xmin;
        myPoint[3].y = (float) ymax;
        myPoint[3].z = (float) zmin;
        newshape.add(myPoint);
        myPoint[4] = new Point3f();
        myPoint[4].x = (float) xmin;
        myPoint[4].y = (float) ymin;
        myPoint[4].z = (float) zmin;
        newshape.add(myPoint);
        return newshape;

    }
    private void jButtonImportRasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportRasterActionPerformed
        try {
            String rastername = file.getName();
            CreateDummyPolyShape();
            Color c = JColorChooser.showDialog(LoadShpFiles.this, "Choose a color...", getBackground());
            Color3f shape_color = new Color3f(0.0f, 0.0f, 0.0f);
            if (c != null) {
                float r = (float) c.getRed();
                float g = (float) c.getGreen();
                float b = (float) c.getBlue();
                r = r / 255.0f;
                g = g / 255.0f;
                b = b / 255.0f;
                Tough2Viewer.dataobj.addShapeColor(r, g, b);
                shape_color = new Color3f(r, g, b);

            } else {
                Tough2Viewer.dataobj.addShapeColor(0.0f, 0.0f, 0.0f);
            }

            Tough2Viewer.dataobj.addShapesFileName(rastername);
            Tough2Viewer.dataobj.addPolyShapeVisible(true);

            /////////////////////////////////////////////////////////////
            SurfaceData tmp_surface_Data = new SurfaceData();
            tmp_surface_Data.set_file_name(rastername);
            tmp_surface_Data.set_shape_color3f(shape_color);
            tmp_surface_Data.set_isSurfaceVisible(true);
            tmp_surface_Data.set_is_a_closed_surface(false);
            GraphData a = generate_raster_surface2(file, true);
            tmp_surface_Data.set_GraphData(a);
            tmp_surface_Data.set_type(0);
            tmp_surface_Data.set_PolyShape(CreateDummyPolyShape2());
            tmp_surface_Data.set_isPolyVisible(true);
            Tough2Viewer.dataobj.Surfaces_Data.add(tmp_surface_Data);
            /////////////////////////////////////////////////////////////

            jButtonImportRaster.setEnabled(false);
            jButtonRasterFile.setEnabled(false);
            generate_raster_surface(file, true);
            Tough2Viewer.dataobj.addSurfaceShapeVisible(true);
            if (Tough2Viewer.tough2viewerGUI.OptionBoxWindow != null) {
                Tough2Viewer.tough2viewerGUI.OptionBoxWindow.AggiornaTabella2();
            }
            if (Tough2Viewer.tough2viewerGUI.importShape != null) {
                Tough2Viewer.tough2viewerGUI.importShape.AggiornaTabella2();
            }
            toINIfile(rastername);
            if (Tough2Viewer.tough2viewerGUI.VoronoiModel3D != null) {
                Tough2Viewer.tough2viewerGUI.VoronoiModel3D.update_model_scene();
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButtonImportRasterActionPerformed

    private void jButtonSelectPLYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectPLYActionPerformed
        String pippi = Tough2Viewer.dataobj.get_WorkingPath();
        cwd = null;
        try {
            cwd = new File(pippi);
        } catch (Exception e) {

        }
        final JFileChooser fc = new JFileChooser(cwd);
        fc.setDialogTitle("Open PLY");
        int returnVal = fc.showOpenDialog(LoadShpFiles.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();

            Color c = JColorChooser.showDialog(LoadShpFiles.this, "Choose a color...", getBackground());
            Color3f shape_color = new Color3f(0.0f, 0.0f, 0.0f);
            if (c != null) {
                float r = (float) c.getRed();
                float g = (float) c.getGreen();
                float b = (float) c.getBlue();
                r = r / 255.0f;
                g = g / 255.0f;
                b = b / 255.0f;
                Tough2Viewer.dataobj.addShapeColor(r, g, b);
                shape_color = new Color3f(r, g, b);

            } else {
                Tough2Viewer.dataobj.addShapeColor(0.0f, 0.0f, 0.0f);
            }

            try {
                InputStream stream = new FileInputStream(file);
                PLYParser myPLYParser = new PLYParser(stream);
                String ply_file_name = file.getName();
                Tough2Viewer.dataobj.myPlyFiles.add(myPLYParser);
                Tough2Viewer.dataobj.addSurfaceShapeVisiblePLY(true);

                /////////////////////////////////////////////////////////////
                SurfaceData tmp_surface_Data = new SurfaceData();
                tmp_surface_Data.set_file_name(ply_file_name);
                tmp_surface_Data.set_shape_color3f(shape_color);
                tmp_surface_Data.set_isSurfaceVisible(true);
                tmp_surface_Data.set_is_a_closed_surface(false);
                tmp_surface_Data.set_PLYParser(myPLYParser);
                tmp_surface_Data.set_type(1);
                boolean is_closed = jCheckBoxClosedSurface.isSelected();
                tmp_surface_Data.set_is_a_closed_surface(is_closed);
                tmp_surface_Data.set_PolyShape(CreateDummyPolyShape2());
                tmp_surface_Data.set_isPolyVisible(true);
                Tough2Viewer.dataobj.Surfaces_Data.add(tmp_surface_Data);
                /////////////////////////////////////////////////////////////
                jButtonSelectPLY.setEnabled(false);

                if (Tough2Viewer.tough2viewerGUI.OptionBoxWindow != null) {
                    Tough2Viewer.tough2viewerGUI.OptionBoxWindow.AggiornaTabella2();
                }
                if (Tough2Viewer.tough2viewerGUI.importShape != null) {
                    Tough2Viewer.tough2viewerGUI.importShape.AggiornaTabella2();
                }
                //toINIfile(shapename);
                if (Tough2Viewer.tough2viewerGUI.VoronoiModel3D != null) {
                    Tough2Viewer.tough2viewerGUI.VoronoiModel3D.update_model_scene();
                }
            } catch (Exception e) {
                int debugguno = 1;
            }
        }
    }//GEN-LAST:event_jButtonSelectPLYActionPerformed

    private void sort(double a[][], int lenght) {
        for (int i1 = 0; i1 < lenght; i1++) {
            for (int i2 = i1 + 1; i2 < lenght; i2++) {
                if (a[i2][0] < a[i1][0]) {
                    for (int i3 = 0; i3 < 2; i3++) {
                        double temp = a[i1][i3];
                        a[i1][i3] = a[i2][i3];
                        a[i2][i3] = temp;
                    }
                }
            }
        }
    }

    public void showpreview() throws IOException {
        FileDataStore store = FileDataStoreFinder.getDataStore(file);
//        SimpleFeatureSource featureSource = store.getFeatureSource();

        // Create a map context and add our shapefile to it
//        MapContext map = new DefaultMapContext();
//        //String filename=file.getName();
//        map.setTitle("QuickPreview");
//        map.addLayer(featureSource, null);
//
//        // Now display the map
//        
//        //JMapFrame.showMap(map);questo funzia ma chiude tutto on close
//        
//        JMapFrame test=new JMapFrame();
//        test.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
//        test.showMap(map);
        ShapeFilePreview3D supertest = new ShapeFilePreview3D(file, jComboBox1.getSelectedIndex(), jCheckBox1.isSelected());
        supertest.setVisible(true);
    }

    public boolean loadShapeFileSHP() throws IOException {
        boolean returnvalue = false;
        String pippi = Tough2Viewer.dataobj.get_WorkingPath();
        cwd = null;
        try {
            cwd = new File(pippi);
        } catch (Exception e) {

        }
        file = JFileDataStoreChooser.showOpenFile("shp", cwd, null);
        if (file != null) {
            GeometryFactory gf = new GeometryFactory();
            ShpFiles in2 = new ShpFiles(file);
            ShapefileReader r = new ShapefileReader(in2, true, true, gf);
            int num_shapes = 0;
            while (r.hasNext()) {
                Geometry TempShape = (Geometry) r.nextRecord().shape();
                num_shapes++;
            }
            r.close();
            DbaseFileReader rDbf = new DbaseFileReader(in2, false, ShapefileDataStore.DEFAULT_STRING_CHARSET);
            DbaseFileHeader myHeader = rDbf.getHeader();
            int numfields = myHeader.getNumFields();
            String[] fields_name = new String[numfields];
            for (int i = 0; i < numfields; i++) {
                fields_name[i] = myHeader.getFieldName(i);
            }
            jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(fields_name));
            totalshape = num_shapes;
            Tough2Viewer.dataobj.set_WorkingPath(file.getAbsolutePath());
            rDbf.close();
            return true;
        }
        return false;
    }

    public String loadAndSaveShapeFileSHP() throws IOException {
        ArrayList newshape = new ArrayList();
        String shapename = file.getName();
        if (file != null) {
            int num_shapes = 0;
            ShpFiles in2 = new ShpFiles(file);
            DbaseFileReader rDbf = new DbaseFileReader(in2, false, ShapefileDataStore.DEFAULT_STRING_CHARSET);
            Object[] fields = new Object[rDbf.getHeader().getNumFields()];
            DbaseFileHeader myHeader = rDbf.getHeader();
            //int numfields=myHeader.getNumFields();
            num_shapes = myHeader.getNumRecords();
            table = new double[num_shapes];
            int row = 0;
            while (rDbf.hasNext()) {
                rDbf.readEntry(fields);
                table[row] = Double.parseDouble(fields[zRow].toString());
                row++;
                // do stuff
            }
            rDbf.close();
            GeometryFactory gf = new GeometryFactory();
            ShapefileReader r = new ShapefileReader(in2, true, true, gf);
            int shapes = 0;
            shape = new Geometry[totalshape];
            while (r.hasNext()) {
                //String myString=r.toString();
                shape[shapes] = (Geometry) r.nextRecord().shape();
                //innt numgeom=shape[shapes].getNumGeometries();
                //int npoint=shape[shapes].getNumPoints();
                Coordinate[] myCord = shape[shapes].getCoordinates();
                int records = myCord.length;
                Point3f[] myPoint = new Point3f[records];
                for (int i = 0; i < records; i++) {
                    myPoint[i] = new Point3f();
                    myPoint[i].x = (float) myCord[i].x;
                    myPoint[i].y = (float) myCord[i].y;
                    if (jCheckBox1.isSelected()) {
                        myPoint[i].z = (float) myCord[i].z;
                    } else {
                        myPoint[i].z = (float) table[shapes];
                    }
                }
                newshape.add(myPoint);
                shapes++;
            }
            r.close();
        }
        Tough2Viewer.dataobj.addShape(newshape);
        return shapename;
    }

    public ArrayList loadAndSaveShapeFileSHP2() throws IOException {
        ArrayList newshape = new ArrayList();
        String shapename = file.getName();
        if (file != null) {
            int num_shapes = 0;
            ShpFiles in2 = new ShpFiles(file);
            DbaseFileReader rDbf = new DbaseFileReader(in2, false, ShapefileDataStore.DEFAULT_STRING_CHARSET);
            Object[] fields = new Object[rDbf.getHeader().getNumFields()];
            DbaseFileHeader myHeader = rDbf.getHeader();
            //int numfields=myHeader.getNumFields();
            num_shapes = myHeader.getNumRecords();
            table = new double[num_shapes];
            int row = 0;
            while (rDbf.hasNext()) {
                rDbf.readEntry(fields);
                table[row] = Double.parseDouble(fields[zRow].toString());
                row++;
                // do stuff
            }
            rDbf.close();
            GeometryFactory gf = new GeometryFactory();
            ShapefileReader r = new ShapefileReader(in2, true, true, gf);
            int shapes = 0;
            shape = new Geometry[totalshape];
            while (r.hasNext()) {
                //String myString=r.toString();
                shape[shapes] = (Geometry) r.nextRecord().shape();
                //innt numgeom=shape[shapes].getNumGeometries();
                //int npoint=shape[shapes].getNumPoints();
                Coordinate[] myCord = shape[shapes].getCoordinates();
                int records = myCord.length;
                Point3f[] myPoint = new Point3f[records];
                for (int i = 0; i < records; i++) {
                    myPoint[i] = new Point3f();
                    myPoint[i].x = (float) myCord[i].x;
                    myPoint[i].y = (float) myCord[i].y;
                    if (jCheckBox1.isSelected()) {
                        myPoint[i].z = (float) myCord[i].z;
                    } else {
                        myPoint[i].z = (float) table[shapes];
                    }
                }
                newshape.add(myPoint);
                shapes++;
            }
            r.close();
        }
        return newshape;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonImportRaster;
    private javax.swing.JButton jButtonImportShape;
    private javax.swing.JButton jButtonRasterFile;
    private javax.swing.JButton jButtonSelectPLY;
    private javax.swing.JButton jButtonShapeFile;
    private javax.swing.JButton jButtonShowPreviewRaster;
    private javax.swing.JButton jButtonShowPreviewShape;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxClosedSurface;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
