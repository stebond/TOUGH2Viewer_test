/*
 * InputBoxRegular.java
 *
 * Created on 28 maggio 2009, 15.37
 */
package Tough2ViewerPRJ;

import java.awt.Dimension;
import java.io.*;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.io.IOException;

/**
 *
 * @author stebond
 */
public class InputBoxRegular extends javax.swing.JDialog {

    String FilePathString;

    /**
     * Creates new form InputBoxRegular
     */
    public InputBoxRegular() {

        initComponents();
        getRootPane().setDefaultButton(closeButton);
        this.setPreferredSize(new Dimension(570, 350));
        jButtonReadData4.setEnabled(false);
        readINIPathFile();
    }

    public void readINIPathFile() {

        boolean exists = (new File("path.ini")).exists();
        if (exists) {
            File file = new File("path.ini");
            FileInputStream fis = null;
            BufferedInputStream bis = null;
            DataInputStream dis = null;
            String linea;
            int num_url = 0;
            try {
                fis = new FileInputStream(file);
                bis = new BufferedInputStream(fis);
                dis = new DataInputStream(bis);
                while (dis.available() != 0) {
                    FilePathString = (String) dis.readLine();
                    //era linea=...
                }
                fis.close();
                bis.close();
                dis.close();
            } catch (IOException e) {
                //e.printStackTrace();
                Tough2Viewer.toLogFile("Impossibile trovare il file path.ini");
            }
        }
    }

    public void closeInputBox() {
        toINIPathFile();
        setVisible(false);

    }

    public void toINIPathFile() {
        String strFilePath = "path.ini";
        try {
            // Open an output stream
            FileOutputStream fos = new FileOutputStream(strFilePath, true);
            //                      DataOutputStream dos = new DataOutputStream(fos);
            PrintStream ps;
            // Print a line of text
            ps = new PrintStream(fos);
            ps.println(FilePathString);
            fos.close();
        } // Catches any error conditions
        catch (IOException e) {
            String output = "Unable to write file";
            Tough2Viewer.toLogFile(output);
            System.exit(-1);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        FileName1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton7 = new javax.swing.JButton();
        jButtonReadData4 = new javax.swing.JButton();
        jButtonIncon = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open structured grid");
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jTextField1.setText("FileNameOut");

        jTextField2.setText("FileNameMesh");

        FileName1.setText("Mesh File...");
        FileName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileName1ActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        jButton7.setText("CreateEmptyModel");
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButtonReadData4.setText("Simulated File...");
        jButtonReadData4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadData4ActionPerformed(evt);
            }
        });

        jButtonIncon.setText("INCON...");
        jButtonIncon.setEnabled(false);
        jButtonIncon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInconActionPerformed(evt);
            }
        });

        jButton1.setText("ExportTOUGH2Viewer.dat");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(FileName1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonReadData4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonIncon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(158, 158, 158)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jProgressBar1, jTextField1});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {FileName1, jButton7, jButtonIncon, jButtonReadData4});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, jButton1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonReadData4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FileName1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonIncon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FileName1, jButton7, jButtonIncon, jButtonReadData4});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileName1ActionPerformed
        // TODO add your handling code here:
        Date x = new Date();
        long start = x.getTime();
        if (readmeshfile()) {
            jButtonReadData4.setEnabled(true);
            jButton7.setEnabled(true);

        }
        Date x2 = new Date();
        long stop = x2.getTime();
        long duration = stop - start;
        System.out.println("Elapsed ReadMesh time:");
        System.out.println(duration);

    }//GEN-LAST:event_FileName1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        CreateEmptyModel2();
}//GEN-LAST:event_jButton7ActionPerformed
    private void CreateEmptyModel2() {
        String fileName = "none";
        Tough2Viewer.dataobj.set_DataFileName(fileName);
        int nxyz = Tough2Viewer.dataobj.get_nxyz();
        int timesteptotal = 1;
        int n_var = 2;
        Tough2Viewer.dataobj.set_number_of_variables(n_var);
        String[] pippo = {"volume", "connections"};
        String[] pippoUM = {"volume", "connections"};
        Tough2Viewer.dataobj.set_VariableName(pippo);
        Tough2Viewer.dataobj.set_variables_UM(pippoUM);
        Tough2Viewer.dataobj.dataArrayCreate(nxyz, timesteptotal);

        for (int i = 0; i < nxyz; i++) {
            for (int i_t = 0; i_t < timesteptotal; i_t++) {
                Tough2Viewer.dataobj.set_dataArray(i, i_t, 0, (float) Tough2Viewer.dataobj.get_BlockVolume(i));
                Tough2Viewer.dataobj.set_dataArray(i, i_t, 1, Tough2Viewer.dataobj.Block_n_conne[i]);

            }
        }
        Tough2Viewer.dataobj.set_dataLoaded(true);

        Tough2Viewer.dataobj.set_voronoi(true);
        Tough2Viewer.dataobj.ID_grid_type = 0;
        Tough2Viewer.tough2viewerGUI.UpdateFileInformation();
        Tough2Viewer.dataobj.set_INIT_ROI();
        if (Tough2Viewer.dataobj.get_dataLoaded()) {
            toINIPathFile();
            Tough2Viewer.dataobj.set_WorkingPath(FilePathString);
        }
        jButtonReadData4.setEnabled(false);
        jButtonIncon.setEnabled(true);
        jButton7.setEnabled(false);
    }
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        closeInputBox();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void jButtonReadData4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadData4ActionPerformed
        String workingDir = Tough2Viewer.dataobj.get_WorkingPath();
        final JFileChooser fc = new JFileChooser(workingDir);
        fc.setDialogTitle("Open simulated");
        int returnVal = fc.showOpenDialog(InputBoxRegular.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String fileName = file.getName();
            Tough2Viewer.dataobj.set_DataFileName(fileName);
            String FilePath = file.getAbsolutePath();
            FilePathString = FilePath.substring(0, FilePath.length() - fileName.length());
            Tough2Viewer.dataobj.set_WorkingPath(FilePathString);
            Tough2Viewer.dataobj.set_DataFilePath(FilePathString);
            jTextField1.setText(FilePath);
            ReadDataFileActivity1 readactivity = new ReadDataFileActivity1(10, FilePath, jProgressBar1);
            readactivity.execute();
            Tough2Viewer.dataobj.ID_grid_type = 0;
            Tough2Viewer.dataobj.set_dataLoaded(true);
            Tough2Viewer.dataobj.initializeRockType();

            //start to read file
        }
    }//GEN-LAST:event_jButtonReadData4ActionPerformed

    private void jButtonInconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInconActionPerformed
        OpenInconFrm InconFrame = new OpenInconFrm();
        InconFrame.setVisible(true);
    }//GEN-LAST:event_jButtonInconActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Qui dobbiamo spacchettare i dati e renderli fruibili alle funzioni già scritte...
        //
        //
        //
        int nxyz = Tough2Viewer.dataobj.get_nxyz();
        float dxmax = 0;
        float dymax = 0;
        float dzmax = 0;

        for (int i = 0; i < nxyz; i++) {
            dxmax = Tough2Viewer.dataobj.max(dxmax, Tough2Viewer.dataobj.get_DimBlockX(i));
            dymax = Tough2Viewer.dataobj.max(dymax, Tough2Viewer.dataobj.get_DimBlockY(i));
            dzmax = Tough2Viewer.dataobj.max(dzmax, Tough2Viewer.dataobj.get_DimBlockZ(i));
        }
        float xmax = Tough2Viewer.dataobj.get_xmax();
        float ymax = Tough2Viewer.dataobj.get_ymax();
        float zmax = Tough2Viewer.dataobj.get_zmax();
        float xmin = Tough2Viewer.dataobj.get_xmin();
        float ymin = Tough2Viewer.dataobj.get_ymin();
        float zmin = Tough2Viewer.dataobj.get_zmin();
        float dmax = Tough2Viewer.dataobj.max(xmax - xmin, ymax - ymin);
        dmax = Tough2Viewer.dataobj.max(dmax, zmax - zmin);

        ArrayList data = new ArrayList();
        ArrayList string_data = new ArrayList();
        //ArrayList[] voronoiGeometryBox=new ArrayList[0];
        //voronoiGeometryBox= Tough2Viewer.dataobj.GetRegularGeometryBox();

        for (int i = 0; i < nxyz; i++) {
            String line_tmp = Integer.toString(i);
            ArrayList BoxData = new ArrayList();
            BoxData.add(i);//ID//POS=0
            double[] x = new double[3];
            x[0] = Tough2Viewer.dataobj.get_Xo(i);
            x[1] = Tough2Viewer.dataobj.get_Yo(i);
            x[2] = Tough2Viewer.dataobj.get_Zo(i);
            line_tmp = line_tmp + " " + Double.toString(x[0]) + " " + Double.toString(x[1]) + " " + Double.toString(x[2]);
            BoxData.add(x);//POS=1
            int number_of_vertex = 8;//in general we add cubes or hexaedral solids...
            line_tmp = line_tmp + " 8";
            BoxData.add(number_of_vertex);//POS=2
            //we define the 8 vertex as follow
            double[][] xv = new double[8][3];
//0 50 250 500 8 (-50,-250,-25) (50,-250,-25) (-50,250,-25) (50,250,-25) (-50,-250,50) (50,-250,50) (-50,250,50) (50,250,50) 6 (1,3,2,0) (1,5,7,3) (1,0,4,5) (2,6,4,0) (2,3,7,6) (4,6,7,5) (-0,-0,-1) (1,-0,0) (0,-1,0) (-1,-0,-0) (0,1,-0) (-0,0,1)
//                      0             1             2            3             4             5            6           7          
            double dimBlock_X = Tough2Viewer.dataobj.get_DimBlockX(i) / 2.0;//x
            double dimBlock_Y = Tough2Viewer.dataobj.get_DimBlockY(i) / 2.0;//y
            double dimBlock_Z = Tough2Viewer.dataobj.get_DimBlockZ(i) / 2.0;//z
            if (dimBlock_X == 0) {
                dimBlock_X = dmax / (10.0f * 2.0f);
            }
            if (dimBlock_Y == 0) {
                dimBlock_Y = dmax / (10.0f * 2.0f);
            }
            if (dimBlock_Z == 0) {
                dimBlock_Z = dmax / (10.0f * 2.0f);
            }
            xv[0][0] = -dimBlock_X;//x
            xv[0][1] = -dimBlock_Y;//y
            xv[0][2] = -dimBlock_Z;//z
            BoxData.add(xv[0]);
            xv[1][0] = +dimBlock_X;//x
            xv[1][1] = -dimBlock_Y;//y
            xv[1][2] = -dimBlock_Z;//z
            BoxData.add(xv[1]);
            xv[2][0] = -dimBlock_X;//x
            xv[2][1] = +dimBlock_Y;//y
            xv[2][2] = -dimBlock_Z;//z
            BoxData.add(xv[2]);
            xv[3][0] = +dimBlock_X;//x
            xv[3][1] = +dimBlock_Y;//y
            xv[3][2] = -dimBlock_Z;//z
            BoxData.add(xv[3]);
            xv[4][0] = -dimBlock_X;//x
            xv[4][1] = -dimBlock_Y;//y
            xv[4][2] = +dimBlock_Z;//z
            BoxData.add(xv[4]);
            xv[5][0] = +dimBlock_X;//x
            xv[5][1] = -dimBlock_Y;//y
            xv[5][2] = +dimBlock_Z;//z
            BoxData.add(xv[5]);
            xv[6][0] = -dimBlock_X;//x
            xv[6][1] = +dimBlock_Y;//y
            xv[6][2] = +dimBlock_Z;//z
            BoxData.add(xv[6]);
            xv[7][0] = +dimBlock_X;//x
            xv[7][1] = +dimBlock_Y;//y
            xv[7][2] = +dimBlock_Z;//z
            BoxData.add(xv[7]);
            for (int iv = 0; iv < 8; iv++) {
                line_tmp = line_tmp + " (";
                for (int ic = 0; ic < 3; ic++) {
                    if (ic < 2) {
                        line_tmp = line_tmp + Double.toString(xv[iv][ic]) + ",";
                    } else {
                        line_tmp = line_tmp + Double.toString(xv[iv][ic]) + ")";
                    }
                }
            }
            //now we add the face number (always 6  for this kind of grids
            int number_of_faces = 6;
            BoxData.add(number_of_faces);
            int[] face_0_index = {1, 3, 2, 0};
            int[] face_1_index = {1, 5, 7, 3};
            int[] face_2_index = {1, 0, 4, 5};
            int[] face_3_index = {2, 6, 4, 0};
            int[] face_4_index = {2, 3, 7, 6};
            int[] face_5_index = {4, 6, 7, 5};

            //(1,3,2,0) (1,5,7,3) (1,0,4,5) (2,6,4,0) (2,3,7,6) (4,6,7,5)
            line_tmp = line_tmp + " 6 (1,3,2,0) (1,5,7,3) (1,0,4,5) (2,6,4,0) (2,3,7,6) (4,6,7,5)";
            BoxData.add(face_0_index);
            BoxData.add(face_1_index);
            BoxData.add(face_2_index);
            BoxData.add(face_3_index);
            BoxData.add(face_4_index);
            BoxData.add(face_5_index);
            //
            //
            //(-0,-0,-1) (1,-0,0) (0,-1,0) (-1,-0,-0) (0,1,-0) (-0,0,1)
            double[] xn0 = {0, 0, -1};
            double[] xn1 = {1, 0, 0};
            double[] xn2 = {0, -1, 0};
            double[] xn3 = {-1, 0, 0};
            double[] xn4 = {0, 1, 0};
            double[] xn5 = {0, 0, 1};
            BoxData.add(xn0);
            BoxData.add(xn1);
            BoxData.add(xn2);
            BoxData.add(xn3);
            BoxData.add(xn4);
            BoxData.add(xn5);
            data.add(BoxData);
            line_tmp = line_tmp + " (0,0,-1) (1,0,0) (0,-1,0) (-1,0,0) (0,1,0) (0,0,1)";
            string_data.add(line_tmp);
        }
        String FilePathString1 = Tough2Viewer.dataobj.get_WorkingPath();
        String File_out_tough2viewerdat = FilePathString1 + "\\" + "tough2viewer.dat";
        try {

            FileOutputStream fos2 = new FileOutputStream(File_out_tough2viewerdat, false);

            PrintStream ps2;
            ps2 = new PrintStream(fos2);
            String lineaOUT;
            for (int i = 0; i < string_data.size(); i++) {
                lineaOUT = (String) string_data.get(i);
                ps2.println(lineaOUT);
            }
            fos2.close();
        } catch (IOException e) {
            String error = "ExportModifiedMesh -> Unable to write file";
            Tough2Viewer.toLogFile(error);
            JOptionPane.showMessageDialog(null, error);
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void CreateEmptyModel() {
        String fileName = "none";
        Tough2Viewer.dataobj.set_DataFileName(fileName);
        jTextField1.setText(fileName);

        int nxyz = Tough2Viewer.dataobj.get_nxyz();
        int timesteptotal = 1;
        int n_var = 1;
        Tough2Viewer.dataobj.set_number_of_variables(n_var);
        String[] pippo = {"Empty model"};
        Tough2Viewer.dataobj.set_VariableName(pippo);
        Tough2Viewer.dataobj.set_variables_UM(pippo);
        Tough2Viewer.dataobj.dataArrayCreate(nxyz, timesteptotal);
        Tough2Viewer.dataobj.set_dataLoaded(true);

        Tough2Viewer.dataobj.set_voronoi(true);
        Tough2Viewer.dataobj.ID_grid_type = 0;
        Tough2Viewer.tough2viewerGUI.UpdateFileInformation();
        Tough2Viewer.dataobj.set_INIT_ROI();
        //iTough2Viewer.dataobj.read_IN_file();

    }

    private boolean readmeshfile() {

        final JFileChooser fc = new JFileChooser(FilePathString);
        fc.setDialogTitle("Open mesh");
        int returnVal = fc.showOpenDialog(InputBoxRegular.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {//start IF
            File file = fc.getSelectedFile();
            String fileName = file.getName();
            //iTough2Viewer.dataobj.set_DataFileName(fileName);
            String FilePath = file.getAbsolutePath();
            jTextField2.setText(FilePath);
            FilePathString = FilePath;
            Tough2Viewer.dataobj.read_MESH_file(file, 0);
        }//END IF

//        Tough2Viewer.dataobj.initializeRockType();
        return true;
    }

    public void showFileChooser() {
        String workingDir = Tough2Viewer.dataobj.get_WorkingPath();
        final JFileChooser fc = new JFileChooser(workingDir);
        fc.setDialogTitle("Open simulated");
        int returnVal = fc.showOpenDialog(InputBoxRegular.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String fileName = file.getName();
            Tough2Viewer.dataobj.set_DataFileName(fileName);
            String FilePath = file.getAbsolutePath();
            String FilePathString = FilePath.substring(0, FilePath.length() - fileName.length());
            Tough2Viewer.dataobj.set_DataFilePath(FilePathString);
            jTextField1.setText(FilePath);
            ReadDataFileActivity readactivity = new ReadDataFileActivity(10, FilePath, jProgressBar1);
            readactivity.execute();
            Tough2Viewer.dataobj.ID_grid_type = 0;
            Tough2Viewer.dataobj.set_dataLoaded(true);
            Tough2Viewer.dataobj.initializeRockType();

            //start to read file
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FileName1;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonIncon;
    private javax.swing.JButton jButtonReadData4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;
}
